// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projector_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_projector_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_projector_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_projector_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_projector_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_projector_5fconfig_2eproto;
namespace tensorflow {
class EmbeddingInfo;
class EmbeddingInfoDefaultTypeInternal;
extern EmbeddingInfoDefaultTypeInternal _EmbeddingInfo_default_instance_;
class ProjectorConfig;
class ProjectorConfigDefaultTypeInternal;
extern ProjectorConfigDefaultTypeInternal _ProjectorConfig_default_instance_;
class SpriteMetadata;
class SpriteMetadataDefaultTypeInternal;
extern SpriteMetadataDefaultTypeInternal _SpriteMetadata_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::EmbeddingInfo* Arena::CreateMaybeMessage<::tensorflow::EmbeddingInfo>(Arena*);
template<> ::tensorflow::ProjectorConfig* Arena::CreateMaybeMessage<::tensorflow::ProjectorConfig>(Arena*);
template<> ::tensorflow::SpriteMetadata* Arena::CreateMaybeMessage<::tensorflow::SpriteMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class SpriteMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.SpriteMetadata) */ {
 public:
  inline SpriteMetadata() : SpriteMetadata(nullptr) {};
  virtual ~SpriteMetadata();

  SpriteMetadata(const SpriteMetadata& from);
  SpriteMetadata(SpriteMetadata&& from) noexcept
    : SpriteMetadata() {
    *this = ::std::move(from);
  }

  inline SpriteMetadata& operator=(const SpriteMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpriteMetadata& operator=(SpriteMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpriteMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpriteMetadata* internal_default_instance() {
    return reinterpret_cast<const SpriteMetadata*>(
               &_SpriteMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpriteMetadata& a, SpriteMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SpriteMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpriteMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpriteMetadata* New() const final {
    return CreateMaybeMessage<SpriteMetadata>(nullptr);
  }

  SpriteMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpriteMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpriteMetadata& from);
  void MergeFrom(const SpriteMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpriteMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.SpriteMetadata";
  }
  protected:
  explicit SpriteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projector_5fconfig_2eproto);
    return ::descriptor_table_projector_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSingleImageDimFieldNumber = 2,
    kImagePathFieldNumber = 1,
  };
  // repeated uint32 single_image_dim = 2;
  int single_image_dim_size() const;
  private:
  int _internal_single_image_dim_size() const;
  public:
  void clear_single_image_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_single_image_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_single_image_dim() const;
  void _internal_add_single_image_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_single_image_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 single_image_dim(int index) const;
  void set_single_image_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_single_image_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      single_image_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_single_image_dim();

  // string image_path = 1;
  void clear_image_path();
  const std::string& image_path() const;
  void set_image_path(const std::string& value);
  void set_image_path(std::string&& value);
  void set_image_path(const char* value);
  void set_image_path(const char* value, size_t size);
  std::string* mutable_image_path();
  std::string* release_image_path();
  void set_allocated_image_path(std::string* image_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_path(
      std::string* image_path);
  private:
  const std::string& _internal_image_path() const;
  void _internal_set_image_path(const std::string& value);
  std::string* _internal_mutable_image_path();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.SpriteMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > single_image_dim_;
  mutable std::atomic<int> _single_image_dim_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projector_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class EmbeddingInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.EmbeddingInfo) */ {
 public:
  inline EmbeddingInfo() : EmbeddingInfo(nullptr) {};
  virtual ~EmbeddingInfo();

  EmbeddingInfo(const EmbeddingInfo& from);
  EmbeddingInfo(EmbeddingInfo&& from) noexcept
    : EmbeddingInfo() {
    *this = ::std::move(from);
  }

  inline EmbeddingInfo& operator=(const EmbeddingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbeddingInfo& operator=(EmbeddingInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbeddingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbeddingInfo* internal_default_instance() {
    return reinterpret_cast<const EmbeddingInfo*>(
               &_EmbeddingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmbeddingInfo& a, EmbeddingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbeddingInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbeddingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbeddingInfo* New() const final {
    return CreateMaybeMessage<EmbeddingInfo>(nullptr);
  }

  EmbeddingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbeddingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbeddingInfo& from);
  void MergeFrom(const EmbeddingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbeddingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.EmbeddingInfo";
  }
  protected:
  explicit EmbeddingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projector_5fconfig_2eproto);
    return ::descriptor_table_projector_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorShapeFieldNumber = 4,
    kTensorNameFieldNumber = 1,
    kMetadataPathFieldNumber = 2,
    kBookmarksPathFieldNumber = 3,
    kTensorPathFieldNumber = 6,
    kSpriteFieldNumber = 5,
  };
  // repeated uint32 tensor_shape = 4;
  int tensor_shape_size() const;
  private:
  int _internal_tensor_shape_size() const;
  public:
  void clear_tensor_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tensor_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tensor_shape() const;
  void _internal_add_tensor_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tensor_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tensor_shape(int index) const;
  void set_tensor_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tensor_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tensor_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tensor_shape();

  // string tensor_name = 1;
  void clear_tensor_name();
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tensor_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tensor_name(
      std::string* tensor_name);
  private:
  const std::string& _internal_tensor_name() const;
  void _internal_set_tensor_name(const std::string& value);
  std::string* _internal_mutable_tensor_name();
  public:

  // string metadata_path = 2;
  void clear_metadata_path();
  const std::string& metadata_path() const;
  void set_metadata_path(const std::string& value);
  void set_metadata_path(std::string&& value);
  void set_metadata_path(const char* value);
  void set_metadata_path(const char* value, size_t size);
  std::string* mutable_metadata_path();
  std::string* release_metadata_path();
  void set_allocated_metadata_path(std::string* metadata_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metadata_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metadata_path(
      std::string* metadata_path);
  private:
  const std::string& _internal_metadata_path() const;
  void _internal_set_metadata_path(const std::string& value);
  std::string* _internal_mutable_metadata_path();
  public:

  // string bookmarks_path = 3;
  void clear_bookmarks_path();
  const std::string& bookmarks_path() const;
  void set_bookmarks_path(const std::string& value);
  void set_bookmarks_path(std::string&& value);
  void set_bookmarks_path(const char* value);
  void set_bookmarks_path(const char* value, size_t size);
  std::string* mutable_bookmarks_path();
  std::string* release_bookmarks_path();
  void set_allocated_bookmarks_path(std::string* bookmarks_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bookmarks_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bookmarks_path(
      std::string* bookmarks_path);
  private:
  const std::string& _internal_bookmarks_path() const;
  void _internal_set_bookmarks_path(const std::string& value);
  std::string* _internal_mutable_bookmarks_path();
  public:

  // string tensor_path = 6;
  void clear_tensor_path();
  const std::string& tensor_path() const;
  void set_tensor_path(const std::string& value);
  void set_tensor_path(std::string&& value);
  void set_tensor_path(const char* value);
  void set_tensor_path(const char* value, size_t size);
  std::string* mutable_tensor_path();
  std::string* release_tensor_path();
  void set_allocated_tensor_path(std::string* tensor_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tensor_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tensor_path(
      std::string* tensor_path);
  private:
  const std::string& _internal_tensor_path() const;
  void _internal_set_tensor_path(const std::string& value);
  std::string* _internal_mutable_tensor_path();
  public:

  // .tensorflow.SpriteMetadata sprite = 5;
  bool has_sprite() const;
  private:
  bool _internal_has_sprite() const;
  public:
  void clear_sprite();
  const ::tensorflow::SpriteMetadata& sprite() const;
  ::tensorflow::SpriteMetadata* release_sprite();
  ::tensorflow::SpriteMetadata* mutable_sprite();
  void set_allocated_sprite(::tensorflow::SpriteMetadata* sprite);
  private:
  const ::tensorflow::SpriteMetadata& _internal_sprite() const;
  ::tensorflow::SpriteMetadata* _internal_mutable_sprite();
  public:
  void unsafe_arena_set_allocated_sprite(
      ::tensorflow::SpriteMetadata* sprite);
  ::tensorflow::SpriteMetadata* unsafe_arena_release_sprite();

  // @@protoc_insertion_point(class_scope:tensorflow.EmbeddingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tensor_shape_;
  mutable std::atomic<int> _tensor_shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookmarks_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_path_;
  ::tensorflow::SpriteMetadata* sprite_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projector_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ProjectorConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.ProjectorConfig) */ {
 public:
  inline ProjectorConfig() : ProjectorConfig(nullptr) {};
  virtual ~ProjectorConfig();

  ProjectorConfig(const ProjectorConfig& from);
  ProjectorConfig(ProjectorConfig&& from) noexcept
    : ProjectorConfig() {
    *this = ::std::move(from);
  }

  inline ProjectorConfig& operator=(const ProjectorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectorConfig& operator=(ProjectorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectorConfig* internal_default_instance() {
    return reinterpret_cast<const ProjectorConfig*>(
               &_ProjectorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProjectorConfig& a, ProjectorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectorConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectorConfig* New() const final {
    return CreateMaybeMessage<ProjectorConfig>(nullptr);
  }

  ProjectorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectorConfig& from);
  void MergeFrom(const ProjectorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.ProjectorConfig";
  }
  protected:
  explicit ProjectorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projector_5fconfig_2eproto);
    return ::descriptor_table_projector_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddingsFieldNumber = 2,
    kModelCheckpointPathFieldNumber = 1,
    kModelCheckpointDirFieldNumber = 3,
  };
  // repeated .tensorflow.EmbeddingInfo embeddings = 2;
  int embeddings_size() const;
  private:
  int _internal_embeddings_size() const;
  public:
  void clear_embeddings();
  ::tensorflow::EmbeddingInfo* mutable_embeddings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::EmbeddingInfo >*
      mutable_embeddings();
  private:
  const ::tensorflow::EmbeddingInfo& _internal_embeddings(int index) const;
  ::tensorflow::EmbeddingInfo* _internal_add_embeddings();
  public:
  const ::tensorflow::EmbeddingInfo& embeddings(int index) const;
  ::tensorflow::EmbeddingInfo* add_embeddings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::EmbeddingInfo >&
      embeddings() const;

  // string model_checkpoint_path = 1;
  void clear_model_checkpoint_path();
  const std::string& model_checkpoint_path() const;
  void set_model_checkpoint_path(const std::string& value);
  void set_model_checkpoint_path(std::string&& value);
  void set_model_checkpoint_path(const char* value);
  void set_model_checkpoint_path(const char* value, size_t size);
  std::string* mutable_model_checkpoint_path();
  std::string* release_model_checkpoint_path();
  void set_allocated_model_checkpoint_path(std::string* model_checkpoint_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model_checkpoint_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_checkpoint_path(
      std::string* model_checkpoint_path);
  private:
  const std::string& _internal_model_checkpoint_path() const;
  void _internal_set_model_checkpoint_path(const std::string& value);
  std::string* _internal_mutable_model_checkpoint_path();
  public:

  // string model_checkpoint_dir = 3;
  void clear_model_checkpoint_dir();
  const std::string& model_checkpoint_dir() const;
  void set_model_checkpoint_dir(const std::string& value);
  void set_model_checkpoint_dir(std::string&& value);
  void set_model_checkpoint_dir(const char* value);
  void set_model_checkpoint_dir(const char* value, size_t size);
  std::string* mutable_model_checkpoint_dir();
  std::string* release_model_checkpoint_dir();
  void set_allocated_model_checkpoint_dir(std::string* model_checkpoint_dir);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model_checkpoint_dir();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_checkpoint_dir(
      std::string* model_checkpoint_dir);
  private:
  const std::string& _internal_model_checkpoint_dir() const;
  void _internal_set_model_checkpoint_dir(const std::string& value);
  std::string* _internal_mutable_model_checkpoint_dir();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.ProjectorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::EmbeddingInfo > embeddings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_checkpoint_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_checkpoint_dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projector_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpriteMetadata

// string image_path = 1;
inline void SpriteMetadata::clear_image_path() {
  image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SpriteMetadata::image_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.SpriteMetadata.image_path)
  return _internal_image_path();
}
inline void SpriteMetadata::set_image_path(const std::string& value) {
  _internal_set_image_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.SpriteMetadata.image_path)
}
inline std::string* SpriteMetadata::mutable_image_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.SpriteMetadata.image_path)
  return _internal_mutable_image_path();
}
inline const std::string& SpriteMetadata::_internal_image_path() const {
  return image_path_.Get();
}
inline void SpriteMetadata::_internal_set_image_path(const std::string& value) {
  
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SpriteMetadata::set_image_path(std::string&& value) {
  
  image_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.SpriteMetadata.image_path)
}
inline void SpriteMetadata::set_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.SpriteMetadata.image_path)
}
inline void SpriteMetadata::set_image_path(const char* value,
    size_t size) {
  
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SpriteMetadata.image_path)
}
inline std::string* SpriteMetadata::_internal_mutable_image_path() {
  
  return image_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SpriteMetadata::release_image_path() {
  // @@protoc_insertion_point(field_release:tensorflow.SpriteMetadata.image_path)
  return image_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpriteMetadata::set_allocated_image_path(std::string* image_path) {
  if (image_path != nullptr) {
    
  } else {
    
  }
  image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SpriteMetadata.image_path)
}
inline std::string* SpriteMetadata::unsafe_arena_release_image_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SpriteMetadata.image_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SpriteMetadata::unsafe_arena_set_allocated_image_path(
    std::string* image_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_path != nullptr) {
    
  } else {
    
  }
  image_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SpriteMetadata.image_path)
}

// repeated uint32 single_image_dim = 2;
inline int SpriteMetadata::_internal_single_image_dim_size() const {
  return single_image_dim_.size();
}
inline int SpriteMetadata::single_image_dim_size() const {
  return _internal_single_image_dim_size();
}
inline void SpriteMetadata::clear_single_image_dim() {
  single_image_dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpriteMetadata::_internal_single_image_dim(int index) const {
  return single_image_dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpriteMetadata::single_image_dim(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.SpriteMetadata.single_image_dim)
  return _internal_single_image_dim(index);
}
inline void SpriteMetadata::set_single_image_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  single_image_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.SpriteMetadata.single_image_dim)
}
inline void SpriteMetadata::_internal_add_single_image_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  single_image_dim_.Add(value);
}
inline void SpriteMetadata::add_single_image_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_single_image_dim(value);
  // @@protoc_insertion_point(field_add:tensorflow.SpriteMetadata.single_image_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SpriteMetadata::_internal_single_image_dim() const {
  return single_image_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SpriteMetadata::single_image_dim() const {
  // @@protoc_insertion_point(field_list:tensorflow.SpriteMetadata.single_image_dim)
  return _internal_single_image_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SpriteMetadata::_internal_mutable_single_image_dim() {
  return &single_image_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SpriteMetadata::mutable_single_image_dim() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.SpriteMetadata.single_image_dim)
  return _internal_mutable_single_image_dim();
}

// -------------------------------------------------------------------

// EmbeddingInfo

// string tensor_name = 1;
inline void EmbeddingInfo::clear_tensor_name() {
  tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbeddingInfo::tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.tensor_name)
  return _internal_tensor_name();
}
inline void EmbeddingInfo::set_tensor_name(const std::string& value) {
  _internal_set_tensor_name(value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.tensor_name)
}
inline std::string* EmbeddingInfo::mutable_tensor_name() {
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.tensor_name)
  return _internal_mutable_tensor_name();
}
inline const std::string& EmbeddingInfo::_internal_tensor_name() const {
  return tensor_name_.Get();
}
inline void EmbeddingInfo::_internal_set_tensor_name(const std::string& value) {
  
  tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbeddingInfo::set_tensor_name(std::string&& value) {
  
  tensor_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.EmbeddingInfo.tensor_name)
}
inline void EmbeddingInfo::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.tensor_name)
}
inline void EmbeddingInfo::set_tensor_name(const char* value,
    size_t size) {
  
  tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.tensor_name)
}
inline std::string* EmbeddingInfo::_internal_mutable_tensor_name() {
  
  return tensor_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbeddingInfo::release_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.tensor_name)
  return tensor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbeddingInfo::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.tensor_name)
}
inline std::string* EmbeddingInfo::unsafe_arena_release_tensor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.EmbeddingInfo.tensor_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tensor_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbeddingInfo::unsafe_arena_set_allocated_tensor_name(
    std::string* tensor_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tensor_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.EmbeddingInfo.tensor_name)
}

// string metadata_path = 2;
inline void EmbeddingInfo::clear_metadata_path() {
  metadata_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbeddingInfo::metadata_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.metadata_path)
  return _internal_metadata_path();
}
inline void EmbeddingInfo::set_metadata_path(const std::string& value) {
  _internal_set_metadata_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.metadata_path)
}
inline std::string* EmbeddingInfo::mutable_metadata_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.metadata_path)
  return _internal_mutable_metadata_path();
}
inline const std::string& EmbeddingInfo::_internal_metadata_path() const {
  return metadata_path_.Get();
}
inline void EmbeddingInfo::_internal_set_metadata_path(const std::string& value) {
  
  metadata_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbeddingInfo::set_metadata_path(std::string&& value) {
  
  metadata_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.EmbeddingInfo.metadata_path)
}
inline void EmbeddingInfo::set_metadata_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.metadata_path)
}
inline void EmbeddingInfo::set_metadata_path(const char* value,
    size_t size) {
  
  metadata_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.metadata_path)
}
inline std::string* EmbeddingInfo::_internal_mutable_metadata_path() {
  
  return metadata_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbeddingInfo::release_metadata_path() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.metadata_path)
  return metadata_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbeddingInfo::set_allocated_metadata_path(std::string* metadata_path) {
  if (metadata_path != nullptr) {
    
  } else {
    
  }
  metadata_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.metadata_path)
}
inline std::string* EmbeddingInfo::unsafe_arena_release_metadata_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.EmbeddingInfo.metadata_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return metadata_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbeddingInfo::unsafe_arena_set_allocated_metadata_path(
    std::string* metadata_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (metadata_path != nullptr) {
    
  } else {
    
  }
  metadata_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metadata_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.EmbeddingInfo.metadata_path)
}

// string bookmarks_path = 3;
inline void EmbeddingInfo::clear_bookmarks_path() {
  bookmarks_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbeddingInfo::bookmarks_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.bookmarks_path)
  return _internal_bookmarks_path();
}
inline void EmbeddingInfo::set_bookmarks_path(const std::string& value) {
  _internal_set_bookmarks_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.bookmarks_path)
}
inline std::string* EmbeddingInfo::mutable_bookmarks_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.bookmarks_path)
  return _internal_mutable_bookmarks_path();
}
inline const std::string& EmbeddingInfo::_internal_bookmarks_path() const {
  return bookmarks_path_.Get();
}
inline void EmbeddingInfo::_internal_set_bookmarks_path(const std::string& value) {
  
  bookmarks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbeddingInfo::set_bookmarks_path(std::string&& value) {
  
  bookmarks_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.EmbeddingInfo.bookmarks_path)
}
inline void EmbeddingInfo::set_bookmarks_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bookmarks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.bookmarks_path)
}
inline void EmbeddingInfo::set_bookmarks_path(const char* value,
    size_t size) {
  
  bookmarks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.bookmarks_path)
}
inline std::string* EmbeddingInfo::_internal_mutable_bookmarks_path() {
  
  return bookmarks_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbeddingInfo::release_bookmarks_path() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.bookmarks_path)
  return bookmarks_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbeddingInfo::set_allocated_bookmarks_path(std::string* bookmarks_path) {
  if (bookmarks_path != nullptr) {
    
  } else {
    
  }
  bookmarks_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bookmarks_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.bookmarks_path)
}
inline std::string* EmbeddingInfo::unsafe_arena_release_bookmarks_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.EmbeddingInfo.bookmarks_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bookmarks_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbeddingInfo::unsafe_arena_set_allocated_bookmarks_path(
    std::string* bookmarks_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bookmarks_path != nullptr) {
    
  } else {
    
  }
  bookmarks_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bookmarks_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.EmbeddingInfo.bookmarks_path)
}

// repeated uint32 tensor_shape = 4;
inline int EmbeddingInfo::_internal_tensor_shape_size() const {
  return tensor_shape_.size();
}
inline int EmbeddingInfo::tensor_shape_size() const {
  return _internal_tensor_shape_size();
}
inline void EmbeddingInfo::clear_tensor_shape() {
  tensor_shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbeddingInfo::_internal_tensor_shape(int index) const {
  return tensor_shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbeddingInfo::tensor_shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.tensor_shape)
  return _internal_tensor_shape(index);
}
inline void EmbeddingInfo::set_tensor_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tensor_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.tensor_shape)
}
inline void EmbeddingInfo::_internal_add_tensor_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tensor_shape_.Add(value);
}
inline void EmbeddingInfo::add_tensor_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tensor_shape(value);
  // @@protoc_insertion_point(field_add:tensorflow.EmbeddingInfo.tensor_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EmbeddingInfo::_internal_tensor_shape() const {
  return tensor_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EmbeddingInfo::tensor_shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.EmbeddingInfo.tensor_shape)
  return _internal_tensor_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EmbeddingInfo::_internal_mutable_tensor_shape() {
  return &tensor_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EmbeddingInfo::mutable_tensor_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.EmbeddingInfo.tensor_shape)
  return _internal_mutable_tensor_shape();
}

// .tensorflow.SpriteMetadata sprite = 5;
inline bool EmbeddingInfo::_internal_has_sprite() const {
  return this != internal_default_instance() && sprite_ != nullptr;
}
inline bool EmbeddingInfo::has_sprite() const {
  return _internal_has_sprite();
}
inline void EmbeddingInfo::clear_sprite() {
  if (GetArena() == nullptr && sprite_ != nullptr) {
    delete sprite_;
  }
  sprite_ = nullptr;
}
inline const ::tensorflow::SpriteMetadata& EmbeddingInfo::_internal_sprite() const {
  const ::tensorflow::SpriteMetadata* p = sprite_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::SpriteMetadata*>(
      &::tensorflow::_SpriteMetadata_default_instance_);
}
inline const ::tensorflow::SpriteMetadata& EmbeddingInfo::sprite() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.sprite)
  return _internal_sprite();
}
inline void EmbeddingInfo::unsafe_arena_set_allocated_sprite(
    ::tensorflow::SpriteMetadata* sprite) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sprite_);
  }
  sprite_ = sprite;
  if (sprite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.EmbeddingInfo.sprite)
}
inline ::tensorflow::SpriteMetadata* EmbeddingInfo::release_sprite() {
  auto temp = unsafe_arena_release_sprite();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::SpriteMetadata* EmbeddingInfo::unsafe_arena_release_sprite() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.sprite)
  
  ::tensorflow::SpriteMetadata* temp = sprite_;
  sprite_ = nullptr;
  return temp;
}
inline ::tensorflow::SpriteMetadata* EmbeddingInfo::_internal_mutable_sprite() {
  
  if (sprite_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::SpriteMetadata>(GetArena());
    sprite_ = p;
  }
  return sprite_;
}
inline ::tensorflow::SpriteMetadata* EmbeddingInfo::mutable_sprite() {
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.sprite)
  return _internal_mutable_sprite();
}
inline void EmbeddingInfo::set_allocated_sprite(::tensorflow::SpriteMetadata* sprite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sprite_;
  }
  if (sprite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sprite);
    if (message_arena != submessage_arena) {
      sprite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sprite, submessage_arena);
    }
    
  } else {
    
  }
  sprite_ = sprite;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.sprite)
}

// string tensor_path = 6;
inline void EmbeddingInfo::clear_tensor_path() {
  tensor_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbeddingInfo::tensor_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.EmbeddingInfo.tensor_path)
  return _internal_tensor_path();
}
inline void EmbeddingInfo::set_tensor_path(const std::string& value) {
  _internal_set_tensor_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.EmbeddingInfo.tensor_path)
}
inline std::string* EmbeddingInfo::mutable_tensor_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.EmbeddingInfo.tensor_path)
  return _internal_mutable_tensor_path();
}
inline const std::string& EmbeddingInfo::_internal_tensor_path() const {
  return tensor_path_.Get();
}
inline void EmbeddingInfo::_internal_set_tensor_path(const std::string& value) {
  
  tensor_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbeddingInfo::set_tensor_path(std::string&& value) {
  
  tensor_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.EmbeddingInfo.tensor_path)
}
inline void EmbeddingInfo::set_tensor_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.EmbeddingInfo.tensor_path)
}
inline void EmbeddingInfo::set_tensor_path(const char* value,
    size_t size) {
  
  tensor_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EmbeddingInfo.tensor_path)
}
inline std::string* EmbeddingInfo::_internal_mutable_tensor_path() {
  
  return tensor_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbeddingInfo::release_tensor_path() {
  // @@protoc_insertion_point(field_release:tensorflow.EmbeddingInfo.tensor_path)
  return tensor_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbeddingInfo::set_allocated_tensor_path(std::string* tensor_path) {
  if (tensor_path != nullptr) {
    
  } else {
    
  }
  tensor_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EmbeddingInfo.tensor_path)
}
inline std::string* EmbeddingInfo::unsafe_arena_release_tensor_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.EmbeddingInfo.tensor_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tensor_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbeddingInfo::unsafe_arena_set_allocated_tensor_path(
    std::string* tensor_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tensor_path != nullptr) {
    
  } else {
    
  }
  tensor_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tensor_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.EmbeddingInfo.tensor_path)
}

// -------------------------------------------------------------------

// ProjectorConfig

// string model_checkpoint_path = 1;
inline void ProjectorConfig::clear_model_checkpoint_path() {
  model_checkpoint_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProjectorConfig::model_checkpoint_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProjectorConfig.model_checkpoint_path)
  return _internal_model_checkpoint_path();
}
inline void ProjectorConfig::set_model_checkpoint_path(const std::string& value) {
  _internal_set_model_checkpoint_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.ProjectorConfig.model_checkpoint_path)
}
inline std::string* ProjectorConfig::mutable_model_checkpoint_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.ProjectorConfig.model_checkpoint_path)
  return _internal_mutable_model_checkpoint_path();
}
inline const std::string& ProjectorConfig::_internal_model_checkpoint_path() const {
  return model_checkpoint_path_.Get();
}
inline void ProjectorConfig::_internal_set_model_checkpoint_path(const std::string& value) {
  
  model_checkpoint_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProjectorConfig::set_model_checkpoint_path(std::string&& value) {
  
  model_checkpoint_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.ProjectorConfig.model_checkpoint_path)
}
inline void ProjectorConfig::set_model_checkpoint_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_checkpoint_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.ProjectorConfig.model_checkpoint_path)
}
inline void ProjectorConfig::set_model_checkpoint_path(const char* value,
    size_t size) {
  
  model_checkpoint_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ProjectorConfig.model_checkpoint_path)
}
inline std::string* ProjectorConfig::_internal_mutable_model_checkpoint_path() {
  
  return model_checkpoint_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProjectorConfig::release_model_checkpoint_path() {
  // @@protoc_insertion_point(field_release:tensorflow.ProjectorConfig.model_checkpoint_path)
  return model_checkpoint_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjectorConfig::set_allocated_model_checkpoint_path(std::string* model_checkpoint_path) {
  if (model_checkpoint_path != nullptr) {
    
  } else {
    
  }
  model_checkpoint_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_checkpoint_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ProjectorConfig.model_checkpoint_path)
}
inline std::string* ProjectorConfig::unsafe_arena_release_model_checkpoint_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ProjectorConfig.model_checkpoint_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_checkpoint_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProjectorConfig::unsafe_arena_set_allocated_model_checkpoint_path(
    std::string* model_checkpoint_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model_checkpoint_path != nullptr) {
    
  } else {
    
  }
  model_checkpoint_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model_checkpoint_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ProjectorConfig.model_checkpoint_path)
}

// repeated .tensorflow.EmbeddingInfo embeddings = 2;
inline int ProjectorConfig::_internal_embeddings_size() const {
  return embeddings_.size();
}
inline int ProjectorConfig::embeddings_size() const {
  return _internal_embeddings_size();
}
inline void ProjectorConfig::clear_embeddings() {
  embeddings_.Clear();
}
inline ::tensorflow::EmbeddingInfo* ProjectorConfig::mutable_embeddings(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ProjectorConfig.embeddings)
  return embeddings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::EmbeddingInfo >*
ProjectorConfig::mutable_embeddings() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ProjectorConfig.embeddings)
  return &embeddings_;
}
inline const ::tensorflow::EmbeddingInfo& ProjectorConfig::_internal_embeddings(int index) const {
  return embeddings_.Get(index);
}
inline const ::tensorflow::EmbeddingInfo& ProjectorConfig::embeddings(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ProjectorConfig.embeddings)
  return _internal_embeddings(index);
}
inline ::tensorflow::EmbeddingInfo* ProjectorConfig::_internal_add_embeddings() {
  return embeddings_.Add();
}
inline ::tensorflow::EmbeddingInfo* ProjectorConfig::add_embeddings() {
  // @@protoc_insertion_point(field_add:tensorflow.ProjectorConfig.embeddings)
  return _internal_add_embeddings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::EmbeddingInfo >&
ProjectorConfig::embeddings() const {
  // @@protoc_insertion_point(field_list:tensorflow.ProjectorConfig.embeddings)
  return embeddings_;
}

// string model_checkpoint_dir = 3;
inline void ProjectorConfig::clear_model_checkpoint_dir() {
  model_checkpoint_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProjectorConfig::model_checkpoint_dir() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProjectorConfig.model_checkpoint_dir)
  return _internal_model_checkpoint_dir();
}
inline void ProjectorConfig::set_model_checkpoint_dir(const std::string& value) {
  _internal_set_model_checkpoint_dir(value);
  // @@protoc_insertion_point(field_set:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
inline std::string* ProjectorConfig::mutable_model_checkpoint_dir() {
  // @@protoc_insertion_point(field_mutable:tensorflow.ProjectorConfig.model_checkpoint_dir)
  return _internal_mutable_model_checkpoint_dir();
}
inline const std::string& ProjectorConfig::_internal_model_checkpoint_dir() const {
  return model_checkpoint_dir_.Get();
}
inline void ProjectorConfig::_internal_set_model_checkpoint_dir(const std::string& value) {
  
  model_checkpoint_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProjectorConfig::set_model_checkpoint_dir(std::string&& value) {
  
  model_checkpoint_dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
inline void ProjectorConfig::set_model_checkpoint_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_checkpoint_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
inline void ProjectorConfig::set_model_checkpoint_dir(const char* value,
    size_t size) {
  
  model_checkpoint_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
inline std::string* ProjectorConfig::_internal_mutable_model_checkpoint_dir() {
  
  return model_checkpoint_dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProjectorConfig::release_model_checkpoint_dir() {
  // @@protoc_insertion_point(field_release:tensorflow.ProjectorConfig.model_checkpoint_dir)
  return model_checkpoint_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjectorConfig::set_allocated_model_checkpoint_dir(std::string* model_checkpoint_dir) {
  if (model_checkpoint_dir != nullptr) {
    
  } else {
    
  }
  model_checkpoint_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_checkpoint_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ProjectorConfig.model_checkpoint_dir)
}
inline std::string* ProjectorConfig::unsafe_arena_release_model_checkpoint_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ProjectorConfig.model_checkpoint_dir)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_checkpoint_dir_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProjectorConfig::unsafe_arena_set_allocated_model_checkpoint_dir(
    std::string* model_checkpoint_dir) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model_checkpoint_dir != nullptr) {
    
  } else {
    
  }
  model_checkpoint_dir_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model_checkpoint_dir, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ProjectorConfig.model_checkpoint_dir)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_projector_5fconfig_2eproto
