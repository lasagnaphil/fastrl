// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#include "event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_event_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Event_event_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_event_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMessage_event_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_event_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestedExitCode_event_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_event_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionLog_event_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_summary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_summary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_event_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaggedRunMetadata_event_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_event_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchdogConfig_event_2eproto;
namespace tensorflow {
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr graph_def_;
  const ::tensorflow::Summary* summary_;
  const ::tensorflow::LogMessage* log_message_;
  const ::tensorflow::SessionLog* session_log_;
  const ::tensorflow::TaggedRunMetadata* tagged_run_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_graph_def_;
} _Event_default_instance_;
class LogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMessage> _instance;
} _LogMessage_default_instance_;
class SessionLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionLog> _instance;
} _SessionLog_default_instance_;
class TaggedRunMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaggedRunMetadata> _instance;
} _TaggedRunMetadata_default_instance_;
class WatchdogConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchdogConfig> _instance;
} _WatchdogConfig_default_instance_;
class RequestedExitCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestedExitCode> _instance;
} _RequestedExitCode_default_instance_;
class WorkerHeartbeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerHeartbeatRequest> _instance;
} _WorkerHeartbeatRequest_default_instance_;
class WorkerHeartbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerHeartbeatResponse> _instance;
} _WorkerHeartbeatResponse_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_Event_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_Event_default_instance_;
    new (ptr) ::tensorflow::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Event_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Event_event_2eproto}, {
      &scc_info_Summary_summary_2eproto.base,
      &scc_info_LogMessage_event_2eproto.base,
      &scc_info_SessionLog_event_2eproto.base,
      &scc_info_TaggedRunMetadata_event_2eproto.base,}};

static void InitDefaultsscc_info_LogMessage_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_LogMessage_default_instance_;
    new (ptr) ::tensorflow::LogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::LogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMessage_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogMessage_event_2eproto}, {}};

static void InitDefaultsscc_info_RequestedExitCode_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RequestedExitCode_default_instance_;
    new (ptr) ::tensorflow::RequestedExitCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RequestedExitCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestedExitCode_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestedExitCode_event_2eproto}, {}};

static void InitDefaultsscc_info_SessionLog_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SessionLog_default_instance_;
    new (ptr) ::tensorflow::SessionLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SessionLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionLog_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionLog_event_2eproto}, {}};

static void InitDefaultsscc_info_TaggedRunMetadata_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TaggedRunMetadata_default_instance_;
    new (ptr) ::tensorflow::TaggedRunMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TaggedRunMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaggedRunMetadata_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaggedRunMetadata_event_2eproto}, {}};

static void InitDefaultsscc_info_WatchdogConfig_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_WatchdogConfig_default_instance_;
    new (ptr) ::tensorflow::WatchdogConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::WatchdogConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchdogConfig_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchdogConfig_event_2eproto}, {}};

static void InitDefaultsscc_info_WorkerHeartbeatRequest_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_WorkerHeartbeatRequest_default_instance_;
    new (ptr) ::tensorflow::WorkerHeartbeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::WorkerHeartbeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkerHeartbeatRequest_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WorkerHeartbeatRequest_event_2eproto}, {
      &scc_info_WatchdogConfig_event_2eproto.base,
      &scc_info_RequestedExitCode_event_2eproto.base,}};

static void InitDefaultsscc_info_WorkerHeartbeatResponse_event_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_WorkerHeartbeatResponse_default_instance_;
    new (ptr) ::tensorflow::WorkerHeartbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::WorkerHeartbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerHeartbeatResponse_event_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkerHeartbeatResponse_event_2eproto}, {
      &scc_info_Event_event_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_event_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_event_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_event_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_event_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, wall_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, step_),
  offsetof(::tensorflow::EventDefaultTypeInternal, file_version_),
  offsetof(::tensorflow::EventDefaultTypeInternal, graph_def_),
  offsetof(::tensorflow::EventDefaultTypeInternal, summary_),
  offsetof(::tensorflow::EventDefaultTypeInternal, log_message_),
  offsetof(::tensorflow::EventDefaultTypeInternal, session_log_),
  offsetof(::tensorflow::EventDefaultTypeInternal, tagged_run_metadata_),
  offsetof(::tensorflow::EventDefaultTypeInternal, meta_graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, what_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogMessage, level_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, status_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, checkpoint_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaggedRunMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaggedRunMetadata, tag_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaggedRunMetadata, run_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WatchdogConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WatchdogConfig, timeout_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RequestedExitCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RequestedExitCode, exit_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, shutdown_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, watchdog_config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, exit_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, health_status_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, worker_log_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, hostname_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::Event)},
  { 15, -1, sizeof(::tensorflow::LogMessage)},
  { 22, -1, sizeof(::tensorflow::SessionLog)},
  { 30, -1, sizeof(::tensorflow::TaggedRunMetadata)},
  { 37, -1, sizeof(::tensorflow::WatchdogConfig)},
  { 43, -1, sizeof(::tensorflow::RequestedExitCode)},
  { 49, -1, sizeof(::tensorflow::WorkerHeartbeatRequest)},
  { 57, -1, sizeof(::tensorflow::WorkerHeartbeatResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_LogMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SessionLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TaggedRunMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_WatchdogConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RequestedExitCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_WorkerHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_WorkerHeartbeatResponse_default_instance_),
};

const char descriptor_table_protodef_event_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013event.proto\022\ntensorflow\032\rsummary.proto"
  "\"\273\002\n\005Event\022\021\n\twall_time\030\001 \001(\001\022\014\n\004step\030\002 "
  "\001(\003\022\026\n\014file_version\030\003 \001(\tH\000\022\023\n\tgraph_def"
  "\030\004 \001(\014H\000\022&\n\007summary\030\005 \001(\0132\023.tensorflow.S"
  "ummaryH\000\022-\n\013log_message\030\006 \001(\0132\026.tensorfl"
  "ow.LogMessageH\000\022-\n\013session_log\030\007 \001(\0132\026.t"
  "ensorflow.SessionLogH\000\022<\n\023tagged_run_met"
  "adata\030\010 \001(\0132\035.tensorflow.TaggedRunMetada"
  "taH\000\022\030\n\016meta_graph_def\030\t \001(\014H\000B\006\n\004what\"\231"
  "\001\n\nLogMessage\022+\n\005level\030\001 \001(\0162\034.tensorflo"
  "w.LogMessage.Level\022\017\n\007message\030\002 \001(\t\"M\n\005L"
  "evel\022\013\n\007UNKNOWN\020\000\022\r\n\tDEBUGGING\020\n\022\010\n\004INFO"
  "\020\024\022\010\n\004WARN\020\036\022\t\n\005ERROR\020(\022\t\n\005FATAL\0202\"\266\001\n\nS"
  "essionLog\0224\n\006status\030\001 \001(\0162$.tensorflow.S"
  "essionLog.SessionStatus\022\027\n\017checkpoint_pa"
  "th\030\002 \001(\t\022\013\n\003msg\030\003 \001(\t\"L\n\rSessionStatus\022\026"
  "\n\022STATUS_UNSPECIFIED\020\000\022\t\n\005START\020\001\022\010\n\004STO"
  "P\020\002\022\016\n\nCHECKPOINT\020\003\"6\n\021TaggedRunMetadata"
  "\022\013\n\003tag\030\001 \001(\t\022\024\n\014run_metadata\030\002 \001(\014\"$\n\016W"
  "atchdogConfig\022\022\n\ntimeout_ms\030\001 \001(\003\"&\n\021Req"
  "uestedExitCode\022\021\n\texit_code\030\001 \001(\005\"\266\001\n\026Wo"
  "rkerHeartbeatRequest\0225\n\rshutdown_mode\030\001 "
  "\001(\0162\036.tensorflow.WorkerShutdownMode\0223\n\017w"
  "atchdog_config\030\002 \001(\0132\032.tensorflow.Watchd"
  "ogConfig\0220\n\texit_code\030\003 \001(\0132\035.tensorflow"
  ".RequestedExitCode\"\203\001\n\027WorkerHeartbeatRe"
  "sponse\022/\n\rhealth_status\030\001 \001(\0162\030.tensorfl"
  "ow.WorkerHealth\022%\n\nworker_log\030\002 \003(\0132\021.te"
  "nsorflow.Event\022\020\n\010hostname\030\003 \001(\t*[\n\014Work"
  "erHealth\022\006\n\002OK\020\000\022\034\n\030RECEIVED_SHUTDOWN_SI"
  "GNAL\020\001\022\022\n\016INTERNAL_ERROR\020\002\022\021\n\rSHUTTING_D"
  "OWN\020\003*k\n\022WorkerShutdownMode\022\013\n\007DEFAULT\020\000"
  "\022\022\n\016NOT_CONFIGURED\020\001\022\030\n\024WAIT_FOR_COORDIN"
  "ATOR\020\002\022\032\n\026SHUTDOWN_AFTER_TIMEOUT\020\003B\'\n\023or"
  "g.tensorflow.utilB\013EventProtosP\001\370\001\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_event_2eproto_deps[1] = {
  &::descriptor_table_summary_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_event_2eproto_sccs[8] = {
  &scc_info_Event_event_2eproto.base,
  &scc_info_LogMessage_event_2eproto.base,
  &scc_info_RequestedExitCode_event_2eproto.base,
  &scc_info_SessionLog_event_2eproto.base,
  &scc_info_TaggedRunMetadata_event_2eproto.base,
  &scc_info_WatchdogConfig_event_2eproto.base,
  &scc_info_WorkerHeartbeatRequest_event_2eproto.base,
  &scc_info_WorkerHeartbeatResponse_event_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_event_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_event_2eproto = {
  false, false, descriptor_table_protodef_event_2eproto, "event.proto", 1403,
  &descriptor_table_event_2eproto_once, descriptor_table_event_2eproto_sccs, descriptor_table_event_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_event_2eproto::offsets,
  file_level_metadata_event_2eproto, 8, file_level_enum_descriptors_event_2eproto, file_level_service_descriptors_event_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_event_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_event_2eproto)), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogMessage_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[0];
}
bool LogMessage_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogMessage_Level LogMessage::UNKNOWN;
constexpr LogMessage_Level LogMessage::DEBUGGING;
constexpr LogMessage_Level LogMessage::INFO;
constexpr LogMessage_Level LogMessage::WARN;
constexpr LogMessage_Level LogMessage::ERROR;
constexpr LogMessage_Level LogMessage::FATAL;
constexpr LogMessage_Level LogMessage::Level_MIN;
constexpr LogMessage_Level LogMessage::Level_MAX;
constexpr int LogMessage::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionLog_SessionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[1];
}
bool SessionLog_SessionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SessionLog_SessionStatus SessionLog::STATUS_UNSPECIFIED;
constexpr SessionLog_SessionStatus SessionLog::START;
constexpr SessionLog_SessionStatus SessionLog::STOP;
constexpr SessionLog_SessionStatus SessionLog::CHECKPOINT;
constexpr SessionLog_SessionStatus SessionLog::SessionStatus_MIN;
constexpr SessionLog_SessionStatus SessionLog::SessionStatus_MAX;
constexpr int SessionLog::SessionStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerHealth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[2];
}
bool WorkerHealth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerShutdownMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[3];
}
bool WorkerShutdownMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::tensorflow::_Event_default_instance_.file_version_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::_Event_default_instance_.graph_def_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::_Event_default_instance_.summary_ = const_cast< ::tensorflow::Summary*>(
      ::tensorflow::Summary::internal_default_instance());
  ::tensorflow::_Event_default_instance_.log_message_ = const_cast< ::tensorflow::LogMessage*>(
      ::tensorflow::LogMessage::internal_default_instance());
  ::tensorflow::_Event_default_instance_.session_log_ = const_cast< ::tensorflow::SessionLog*>(
      ::tensorflow::SessionLog::internal_default_instance());
  ::tensorflow::_Event_default_instance_.tagged_run_metadata_ = const_cast< ::tensorflow::TaggedRunMetadata*>(
      ::tensorflow::TaggedRunMetadata::internal_default_instance());
  ::tensorflow::_Event_default_instance_.meta_graph_def_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Event::_Internal {
 public:
  static const ::tensorflow::Summary& summary(const Event* msg);
  static const ::tensorflow::LogMessage& log_message(const Event* msg);
  static const ::tensorflow::SessionLog& session_log(const Event* msg);
  static const ::tensorflow::TaggedRunMetadata& tagged_run_metadata(const Event* msg);
};

const ::tensorflow::Summary&
Event::_Internal::summary(const Event* msg) {
  return *msg->what_.summary_;
}
const ::tensorflow::LogMessage&
Event::_Internal::log_message(const Event* msg) {
  return *msg->what_.log_message_;
}
const ::tensorflow::SessionLog&
Event::_Internal::session_log(const Event* msg) {
  return *msg->what_.session_log_;
}
const ::tensorflow::TaggedRunMetadata&
Event::_Internal::tagged_run_metadata(const Event* msg) {
  return *msg->what_.tagged_run_metadata_;
}
void Event::set_allocated_summary(::tensorflow::Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary)->GetArena();
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    what_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.summary)
}
void Event::clear_summary() {
  if (_internal_has_summary()) {
    if (GetArena() == nullptr) {
      delete what_.summary_;
    }
    clear_has_what();
  }
}
void Event::set_allocated_log_message(::tensorflow::LogMessage* log_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (log_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_message);
    if (message_arena != submessage_arena) {
      log_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_message, submessage_arena);
    }
    set_has_log_message();
    what_.log_message_ = log_message;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.log_message)
}
void Event::set_allocated_session_log(::tensorflow::SessionLog* session_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (session_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_log);
    if (message_arena != submessage_arena) {
      session_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_log, submessage_arena);
    }
    set_has_session_log();
    what_.session_log_ = session_log;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.session_log)
}
void Event::set_allocated_tagged_run_metadata(::tensorflow::TaggedRunMetadata* tagged_run_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (tagged_run_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tagged_run_metadata);
    if (message_arena != submessage_arena) {
      tagged_run_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tagged_run_metadata, submessage_arena);
    }
    set_has_tagged_run_metadata();
    what_.tagged_run_metadata_ = tagged_run_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.tagged_run_metadata)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wall_time_, &from.wall_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_has_what();
  switch (from.what_case()) {
    case kFileVersion: {
      _internal_set_file_version(from._internal_file_version());
      break;
    }
    case kGraphDef: {
      _internal_set_graph_def(from._internal_graph_def());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::tensorflow::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kLogMessage: {
      _internal_mutable_log_message()->::tensorflow::LogMessage::MergeFrom(from._internal_log_message());
      break;
    }
    case kSessionLog: {
      _internal_mutable_session_log()->::tensorflow::SessionLog::MergeFrom(from._internal_session_log());
      break;
    }
    case kTaggedRunMetadata: {
      _internal_mutable_tagged_run_metadata()->::tensorflow::TaggedRunMetadata::MergeFrom(from._internal_tagged_run_metadata());
      break;
    }
    case kMetaGraphDef: {
      _internal_set_meta_graph_def(from._internal_meta_graph_def());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_event_2eproto.base);
  ::memset(&wall_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_has_what();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:tensorflow.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_what()) {
    clear_what();
  }
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_event_2eproto.base);
  return *internal_default_instance();
}


void Event::clear_what() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.Event)
  switch (what_case()) {
    case kFileVersion: {
      what_.file_version_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kGraphDef: {
      what_.graph_def_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kSummary: {
      if (GetArena() == nullptr) {
        delete what_.summary_;
      }
      break;
    }
    case kLogMessage: {
      if (GetArena() == nullptr) {
        delete what_.log_message_;
      }
      break;
    }
    case kSessionLog: {
      if (GetArena() == nullptr) {
        delete what_.session_log_;
      }
      break;
    }
    case kTaggedRunMetadata: {
      if (GetArena() == nullptr) {
        delete what_.tagged_run_metadata_;
      }
      break;
    }
    case kMetaGraphDef: {
      what_.meta_graph_def_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHAT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wall_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_what();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double wall_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.Event.file_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes graph_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_graph_def();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.Summary summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.LogMessage log_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SessionLog session_log = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tagged_run_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes meta_graph_def = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_meta_graph_def();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double wall_time = 1;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_wall_time(), target);
  }

  // int64 step = 2;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_step(), target);
  }

  // string file_version = 3;
  if (_internal_has_file_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_version().data(), static_cast<int>(this->_internal_file_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Event.file_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_version(), target);
  }

  // bytes graph_def = 4;
  if (_internal_has_graph_def()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_graph_def(), target);
  }

  // .tensorflow.Summary summary = 5;
  if (_internal_has_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::summary(this), target, stream);
  }

  // .tensorflow.LogMessage log_message = 6;
  if (_internal_has_log_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::log_message(this), target, stream);
  }

  // .tensorflow.SessionLog session_log = 7;
  if (_internal_has_session_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::session_log(this), target, stream);
  }

  // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
  if (_internal_has_tagged_run_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tagged_run_metadata(this), target, stream);
  }

  // bytes meta_graph_def = 9;
  if (_internal_has_meta_graph_def()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_meta_graph_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double wall_time = 1;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_step());
  }

  switch (what_case()) {
    // string file_version = 3;
    case kFileVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_version());
      break;
    }
    // bytes graph_def = 4;
    case kGraphDef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_graph_def());
      break;
    }
    // .tensorflow.Summary summary = 5;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.summary_);
      break;
    }
    // .tensorflow.LogMessage log_message = 6;
    case kLogMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.log_message_);
      break;
    }
    // .tensorflow.SessionLog session_log = 7;
    case kSessionLog: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.session_log_);
      break;
    }
    // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
    case kTaggedRunMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.tagged_run_metadata_);
      break;
    }
    // bytes meta_graph_def = 9;
    case kMetaGraphDef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_meta_graph_def());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.wall_time() <= 0 && from.wall_time() >= 0)) {
    _internal_set_wall_time(from._internal_wall_time());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  switch (from.what_case()) {
    case kFileVersion: {
      _internal_set_file_version(from._internal_file_version());
      break;
    }
    case kGraphDef: {
      _internal_set_graph_def(from._internal_graph_def());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::tensorflow::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kLogMessage: {
      _internal_mutable_log_message()->::tensorflow::LogMessage::MergeFrom(from._internal_log_message());
      break;
    }
    case kSessionLog: {
      _internal_mutable_session_log()->::tensorflow::SessionLog::MergeFrom(from._internal_session_log());
      break;
    }
    case kTaggedRunMetadata: {
      _internal_mutable_tagged_run_metadata()->::tensorflow::TaggedRunMetadata::MergeFrom(from._internal_tagged_run_metadata());
      break;
    }
    case kMetaGraphDef: {
      _internal_set_meta_graph_def(from._internal_meta_graph_def());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, step_)
      + sizeof(Event::step_)
      - PROTOBUF_FIELD_OFFSET(Event, wall_time_)>(
          reinterpret_cast<char*>(&wall_time_),
          reinterpret_cast<char*>(&other->wall_time_));
  swap(what_, other->what_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogMessage::InitAsDefaultInstance() {
}
class LogMessage::_Internal {
 public:
};

LogMessage::LogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.LogMessage)
}

void LogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMessage_event_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.LogMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogMessage::ArenaDtor(void* object) {
  LogMessage* _this = reinterpret_cast< LogMessage* >(object);
  (void)_this;
}
void LogMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMessage& LogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMessage_event_2eproto.base);
  return *internal_default_instance();
}


void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.LogMessage.Level level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::tensorflow::LogMessage_Level>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.LogMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.LogMessage.Level level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.LogMessage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .tensorflow.LogMessage.Level level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LogMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LogMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionLog::InitAsDefaultInstance() {
}
class SessionLog::_Internal {
 public:
};

SessionLog::SessionLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SessionLog)
}
SessionLog::SessionLog(const SessionLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkpoint_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checkpoint_path().empty()) {
    checkpoint_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkpoint_path(),
      GetArena());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SessionLog)
}

void SessionLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionLog_event_2eproto.base);
  checkpoint_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

SessionLog::~SessionLog() {
  // @@protoc_insertion_point(destructor:tensorflow.SessionLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  checkpoint_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionLog::ArenaDtor(void* object) {
  SessionLog* _this = reinterpret_cast< SessionLog* >(object);
  (void)_this;
}
void SessionLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionLog& SessionLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionLog_event_2eproto.base);
  return *internal_default_instance();
}


void SessionLog::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SessionLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpoint_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.SessionLog.SessionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::tensorflow::SessionLog_SessionStatus>(val));
        } else goto handle_unusual;
        continue;
      // string checkpoint_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_checkpoint_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SessionLog.checkpoint_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SessionLog.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SessionLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.SessionLog.SessionStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string checkpoint_path = 2;
  if (this->checkpoint_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint_path().data(), static_cast<int>(this->_internal_checkpoint_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.checkpoint_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkpoint_path(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SessionLog)
  return target;
}

size_t SessionLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SessionLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string checkpoint_path = 2;
  if (this->checkpoint_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint_path());
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .tensorflow.SessionLog.SessionStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SessionLog)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SessionLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SessionLog)
    MergeFrom(*source);
  }
}

void SessionLog::MergeFrom(const SessionLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SessionLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checkpoint_path().size() > 0) {
    _internal_set_checkpoint_path(from._internal_checkpoint_path());
  }
  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SessionLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SessionLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionLog::CopyFrom(const SessionLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SessionLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionLog::IsInitialized() const {
  return true;
}

void SessionLog::InternalSwap(SessionLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  checkpoint_path_.Swap(&other->checkpoint_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaggedRunMetadata::InitAsDefaultInstance() {
}
class TaggedRunMetadata::_Internal {
 public:
};

TaggedRunMetadata::TaggedRunMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TaggedRunMetadata)
}
TaggedRunMetadata::TaggedRunMetadata(const TaggedRunMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  run_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_metadata().empty()) {
    run_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_run_metadata(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TaggedRunMetadata)
}

void TaggedRunMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaggedRunMetadata_event_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TaggedRunMetadata::~TaggedRunMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.TaggedRunMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaggedRunMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaggedRunMetadata::ArenaDtor(void* object) {
  TaggedRunMetadata* _this = reinterpret_cast< TaggedRunMetadata* >(object);
  (void)_this;
}
void TaggedRunMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaggedRunMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaggedRunMetadata& TaggedRunMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaggedRunMetadata_event_2eproto.base);
  return *internal_default_instance();
}


void TaggedRunMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TaggedRunMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  run_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaggedRunMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.TaggedRunMetadata.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes run_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_run_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaggedRunMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TaggedRunMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TaggedRunMetadata.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // bytes run_metadata = 2;
  if (this->run_metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_run_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TaggedRunMetadata)
  return target;
}

size_t TaggedRunMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TaggedRunMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // bytes run_metadata = 2;
  if (this->run_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_run_metadata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaggedRunMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TaggedRunMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TaggedRunMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaggedRunMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TaggedRunMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TaggedRunMetadata)
    MergeFrom(*source);
  }
}

void TaggedRunMetadata::MergeFrom(const TaggedRunMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TaggedRunMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.run_metadata().size() > 0) {
    _internal_set_run_metadata(from._internal_run_metadata());
  }
}

void TaggedRunMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TaggedRunMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaggedRunMetadata::CopyFrom(const TaggedRunMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TaggedRunMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaggedRunMetadata::IsInitialized() const {
  return true;
}

void TaggedRunMetadata::InternalSwap(TaggedRunMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  run_metadata_.Swap(&other->run_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TaggedRunMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchdogConfig::InitAsDefaultInstance() {
}
class WatchdogConfig::_Internal {
 public:
};

WatchdogConfig::WatchdogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WatchdogConfig)
}
WatchdogConfig::WatchdogConfig(const WatchdogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeout_ms_ = from.timeout_ms_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.WatchdogConfig)
}

void WatchdogConfig::SharedCtor() {
  timeout_ms_ = PROTOBUF_LONGLONG(0);
}

WatchdogConfig::~WatchdogConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.WatchdogConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WatchdogConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WatchdogConfig::ArenaDtor(void* object) {
  WatchdogConfig* _this = reinterpret_cast< WatchdogConfig* >(object);
  (void)_this;
}
void WatchdogConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchdogConfig& WatchdogConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchdogConfig_event_2eproto.base);
  return *internal_default_instance();
}


void WatchdogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WatchdogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ms_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timeout_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WatchdogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeout_ms = 1;
  if (this->timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WatchdogConfig)
  return target;
}

size_t WatchdogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WatchdogConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timeout_ms = 1;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeout_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchdogConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.WatchdogConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchdogConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchdogConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.WatchdogConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.WatchdogConfig)
    MergeFrom(*source);
  }
}

void WatchdogConfig::MergeFrom(const WatchdogConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WatchdogConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeout_ms() != 0) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
}

void WatchdogConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.WatchdogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchdogConfig::CopyFrom(const WatchdogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WatchdogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogConfig::IsInitialized() const {
  return true;
}

void WatchdogConfig::InternalSwap(WatchdogConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timeout_ms_, other->timeout_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestedExitCode::InitAsDefaultInstance() {
}
class RequestedExitCode::_Internal {
 public:
};

RequestedExitCode::RequestedExitCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RequestedExitCode)
}
RequestedExitCode::RequestedExitCode(const RequestedExitCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exit_code_ = from.exit_code_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RequestedExitCode)
}

void RequestedExitCode::SharedCtor() {
  exit_code_ = 0;
}

RequestedExitCode::~RequestedExitCode() {
  // @@protoc_insertion_point(destructor:tensorflow.RequestedExitCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestedExitCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestedExitCode::ArenaDtor(void* object) {
  RequestedExitCode* _this = reinterpret_cast< RequestedExitCode* >(object);
  (void)_this;
}
void RequestedExitCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestedExitCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestedExitCode& RequestedExitCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestedExitCode_event_2eproto.base);
  return *internal_default_instance();
}


void RequestedExitCode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RequestedExitCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestedExitCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 exit_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exit_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestedExitCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RequestedExitCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exit_code = 1;
  if (this->exit_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_exit_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RequestedExitCode)
  return target;
}

size_t RequestedExitCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RequestedExitCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 exit_code = 1;
  if (this->exit_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exit_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestedExitCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RequestedExitCode)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestedExitCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestedExitCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RequestedExitCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RequestedExitCode)
    MergeFrom(*source);
  }
}

void RequestedExitCode::MergeFrom(const RequestedExitCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RequestedExitCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exit_code() != 0) {
    _internal_set_exit_code(from._internal_exit_code());
  }
}

void RequestedExitCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RequestedExitCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestedExitCode::CopyFrom(const RequestedExitCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RequestedExitCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestedExitCode::IsInitialized() const {
  return true;
}

void RequestedExitCode::InternalSwap(RequestedExitCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(exit_code_, other->exit_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestedExitCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerHeartbeatRequest::InitAsDefaultInstance() {
  ::tensorflow::_WorkerHeartbeatRequest_default_instance_._instance.get_mutable()->watchdog_config_ = const_cast< ::tensorflow::WatchdogConfig*>(
      ::tensorflow::WatchdogConfig::internal_default_instance());
  ::tensorflow::_WorkerHeartbeatRequest_default_instance_._instance.get_mutable()->exit_code_ = const_cast< ::tensorflow::RequestedExitCode*>(
      ::tensorflow::RequestedExitCode::internal_default_instance());
}
class WorkerHeartbeatRequest::_Internal {
 public:
  static const ::tensorflow::WatchdogConfig& watchdog_config(const WorkerHeartbeatRequest* msg);
  static const ::tensorflow::RequestedExitCode& exit_code(const WorkerHeartbeatRequest* msg);
};

const ::tensorflow::WatchdogConfig&
WorkerHeartbeatRequest::_Internal::watchdog_config(const WorkerHeartbeatRequest* msg) {
  return *msg->watchdog_config_;
}
const ::tensorflow::RequestedExitCode&
WorkerHeartbeatRequest::_Internal::exit_code(const WorkerHeartbeatRequest* msg) {
  return *msg->exit_code_;
}
WorkerHeartbeatRequest::WorkerHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WorkerHeartbeatRequest)
}
WorkerHeartbeatRequest::WorkerHeartbeatRequest(const WorkerHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_watchdog_config()) {
    watchdog_config_ = new ::tensorflow::WatchdogConfig(*from.watchdog_config_);
  } else {
    watchdog_config_ = nullptr;
  }
  if (from._internal_has_exit_code()) {
    exit_code_ = new ::tensorflow::RequestedExitCode(*from.exit_code_);
  } else {
    exit_code_ = nullptr;
  }
  shutdown_mode_ = from.shutdown_mode_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.WorkerHeartbeatRequest)
}

void WorkerHeartbeatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerHeartbeatRequest_event_2eproto.base);
  ::memset(&watchdog_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_mode_) -
      reinterpret_cast<char*>(&watchdog_config_)) + sizeof(shutdown_mode_));
}

WorkerHeartbeatRequest::~WorkerHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.WorkerHeartbeatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerHeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete watchdog_config_;
  if (this != internal_default_instance()) delete exit_code_;
}

void WorkerHeartbeatRequest::ArenaDtor(void* object) {
  WorkerHeartbeatRequest* _this = reinterpret_cast< WorkerHeartbeatRequest* >(object);
  (void)_this;
}
void WorkerHeartbeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerHeartbeatRequest& WorkerHeartbeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerHeartbeatRequest_event_2eproto.base);
  return *internal_default_instance();
}


void WorkerHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WorkerHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && watchdog_config_ != nullptr) {
    delete watchdog_config_;
  }
  watchdog_config_ = nullptr;
  if (GetArena() == nullptr && exit_code_ != nullptr) {
    delete exit_code_;
  }
  exit_code_ = nullptr;
  shutdown_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerHeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.WorkerShutdownMode shutdown_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shutdown_mode(static_cast<::tensorflow::WorkerShutdownMode>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.WatchdogConfig watchdog_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchdog_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RequestedExitCode exit_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_exit_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerHeartbeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WorkerHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.WorkerShutdownMode shutdown_mode = 1;
  if (this->shutdown_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_shutdown_mode(), target);
  }

  // .tensorflow.WatchdogConfig watchdog_config = 2;
  if (this->has_watchdog_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::watchdog_config(this), target, stream);
  }

  // .tensorflow.RequestedExitCode exit_code = 3;
  if (this->has_exit_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::exit_code(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WorkerHeartbeatRequest)
  return target;
}

size_t WorkerHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WorkerHeartbeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.WatchdogConfig watchdog_config = 2;
  if (this->has_watchdog_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *watchdog_config_);
  }

  // .tensorflow.RequestedExitCode exit_code = 3;
  if (this->has_exit_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exit_code_);
  }

  // .tensorflow.WorkerShutdownMode shutdown_mode = 1;
  if (this->shutdown_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shutdown_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerHeartbeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.WorkerHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerHeartbeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerHeartbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.WorkerHeartbeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.WorkerHeartbeatRequest)
    MergeFrom(*source);
  }
}

void WorkerHeartbeatRequest::MergeFrom(const WorkerHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WorkerHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_watchdog_config()) {
    _internal_mutable_watchdog_config()->::tensorflow::WatchdogConfig::MergeFrom(from._internal_watchdog_config());
  }
  if (from.has_exit_code()) {
    _internal_mutable_exit_code()->::tensorflow::RequestedExitCode::MergeFrom(from._internal_exit_code());
  }
  if (from.shutdown_mode() != 0) {
    _internal_set_shutdown_mode(from._internal_shutdown_mode());
  }
}

void WorkerHeartbeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.WorkerHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerHeartbeatRequest::CopyFrom(const WorkerHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WorkerHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerHeartbeatRequest::IsInitialized() const {
  return true;
}

void WorkerHeartbeatRequest::InternalSwap(WorkerHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerHeartbeatRequest, shutdown_mode_)
      + sizeof(WorkerHeartbeatRequest::shutdown_mode_)
      - PROTOBUF_FIELD_OFFSET(WorkerHeartbeatRequest, watchdog_config_)>(
          reinterpret_cast<char*>(&watchdog_config_),
          reinterpret_cast<char*>(&other->watchdog_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerHeartbeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerHeartbeatResponse::InitAsDefaultInstance() {
}
class WorkerHeartbeatResponse::_Internal {
 public:
};

WorkerHeartbeatResponse::WorkerHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  worker_log_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WorkerHeartbeatResponse)
}
WorkerHeartbeatResponse::WorkerHeartbeatResponse(const WorkerHeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      worker_log_(from.worker_log_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  health_status_ = from.health_status_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.WorkerHeartbeatResponse)
}

void WorkerHeartbeatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerHeartbeatResponse_event_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_status_ = 0;
}

WorkerHeartbeatResponse::~WorkerHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.WorkerHeartbeatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerHeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkerHeartbeatResponse::ArenaDtor(void* object) {
  WorkerHeartbeatResponse* _this = reinterpret_cast< WorkerHeartbeatResponse* >(object);
  (void)_this;
}
void WorkerHeartbeatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerHeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerHeartbeatResponse& WorkerHeartbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerHeartbeatResponse_event_2eproto.base);
  return *internal_default_instance();
}


void WorkerHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WorkerHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_log_.Clear();
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  health_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerHeartbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.WorkerHealth health_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_health_status(static_cast<::tensorflow::WorkerHealth>(val));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.Event worker_log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worker_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string hostname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WorkerHeartbeatResponse.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerHeartbeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WorkerHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.WorkerHealth health_status = 1;
  if (this->health_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_health_status(), target);
  }

  // repeated .tensorflow.Event worker_log = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_worker_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_worker_log(i), target, stream);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WorkerHeartbeatResponse.hostname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WorkerHeartbeatResponse)
  return target;
}

size_t WorkerHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WorkerHeartbeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.Event worker_log = 2;
  total_size += 1UL * this->_internal_worker_log_size();
  for (const auto& msg : this->worker_log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .tensorflow.WorkerHealth health_status = 1;
  if (this->health_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_health_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerHeartbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.WorkerHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerHeartbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerHeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.WorkerHeartbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.WorkerHeartbeatResponse)
    MergeFrom(*source);
  }
}

void WorkerHeartbeatResponse::MergeFrom(const WorkerHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WorkerHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_log_.MergeFrom(from.worker_log_);
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.health_status() != 0) {
    _internal_set_health_status(from._internal_health_status());
  }
}

void WorkerHeartbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.WorkerHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerHeartbeatResponse::CopyFrom(const WorkerHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WorkerHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerHeartbeatResponse::IsInitialized() const {
  return true;
}

void WorkerHeartbeatResponse::InternalSwap(WorkerHeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  worker_log_.InternalSwap(&other->worker_log_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(health_status_, other->health_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerHeartbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::Event* Arena::CreateMaybeMessage< ::tensorflow::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LogMessage* Arena::CreateMaybeMessage< ::tensorflow::LogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SessionLog* Arena::CreateMaybeMessage< ::tensorflow::SessionLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SessionLog >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TaggedRunMetadata* Arena::CreateMaybeMessage< ::tensorflow::TaggedRunMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TaggedRunMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WatchdogConfig* Arena::CreateMaybeMessage< ::tensorflow::WatchdogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WatchdogConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RequestedExitCode* Arena::CreateMaybeMessage< ::tensorflow::RequestedExitCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RequestedExitCode >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WorkerHeartbeatRequest* Arena::CreateMaybeMessage< ::tensorflow::WorkerHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WorkerHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WorkerHeartbeatResponse* Arena::CreateMaybeMessage< ::tensorflow::WorkerHeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WorkerHeartbeatResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
