// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projector_config.proto

#include "projector_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_projector_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmbeddingInfo_projector_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_projector_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpriteMetadata_projector_5fconfig_2eproto;
namespace tensorflow {
class SpriteMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpriteMetadata> _instance;
} _SpriteMetadata_default_instance_;
class EmbeddingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmbeddingInfo> _instance;
} _EmbeddingInfo_default_instance_;
class ProjectorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectorConfig> _instance;
} _ProjectorConfig_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_EmbeddingInfo_projector_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_EmbeddingInfo_default_instance_;
    new (ptr) ::tensorflow::EmbeddingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::EmbeddingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmbeddingInfo_projector_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EmbeddingInfo_projector_5fconfig_2eproto}, {
      &scc_info_SpriteMetadata_projector_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ProjectorConfig_projector_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProjectorConfig_default_instance_;
    new (ptr) ::tensorflow::ProjectorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProjectorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectorConfig_projector_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProjectorConfig_projector_5fconfig_2eproto}, {
      &scc_info_EmbeddingInfo_projector_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SpriteMetadata_projector_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SpriteMetadata_default_instance_;
    new (ptr) ::tensorflow::SpriteMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SpriteMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpriteMetadata_projector_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpriteMetadata_projector_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_projector_5fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_projector_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_projector_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_projector_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SpriteMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SpriteMetadata, image_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SpriteMetadata, single_image_dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EmbeddingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EmbeddingInfo, tensor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::EmbeddingInfo, metadata_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::EmbeddingInfo, bookmarks_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::EmbeddingInfo, tensor_shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::EmbeddingInfo, sprite_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::EmbeddingInfo, tensor_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProjectorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProjectorConfig, model_checkpoint_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProjectorConfig, embeddings_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProjectorConfig, model_checkpoint_dir_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::SpriteMetadata)},
  { 7, -1, sizeof(::tensorflow::EmbeddingInfo)},
  { 18, -1, sizeof(::tensorflow::ProjectorConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SpriteMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_EmbeddingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProjectorConfig_default_instance_),
};

const char descriptor_table_protodef_projector_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026projector_config.proto\022\ntensorflow\">\n\016"
  "SpriteMetadata\022\022\n\nimage_path\030\001 \001(\t\022\030\n\020si"
  "ngle_image_dim\030\002 \003(\r\"\252\001\n\rEmbeddingInfo\022\023"
  "\n\013tensor_name\030\001 \001(\t\022\025\n\rmetadata_path\030\002 \001"
  "(\t\022\026\n\016bookmarks_path\030\003 \001(\t\022\024\n\014tensor_sha"
  "pe\030\004 \003(\r\022*\n\006sprite\030\005 \001(\0132\032.tensorflow.Sp"
  "riteMetadata\022\023\n\013tensor_path\030\006 \001(\t\"}\n\017Pro"
  "jectorConfig\022\035\n\025model_checkpoint_path\030\001 "
  "\001(\t\022-\n\nembeddings\030\002 \003(\0132\031.tensorflow.Emb"
  "eddingInfo\022\034\n\024model_checkpoint_dir\030\003 \001(\t"
  "B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_projector_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_projector_5fconfig_2eproto_sccs[3] = {
  &scc_info_EmbeddingInfo_projector_5fconfig_2eproto.base,
  &scc_info_ProjectorConfig_projector_5fconfig_2eproto.base,
  &scc_info_SpriteMetadata_projector_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_projector_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_projector_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_projector_5fconfig_2eproto, "projector_config.proto", 413,
  &descriptor_table_projector_5fconfig_2eproto_once, descriptor_table_projector_5fconfig_2eproto_sccs, descriptor_table_projector_5fconfig_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_projector_5fconfig_2eproto::offsets,
  file_level_metadata_projector_5fconfig_2eproto, 3, file_level_enum_descriptors_projector_5fconfig_2eproto, file_level_service_descriptors_projector_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_projector_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_projector_5fconfig_2eproto)), true);
namespace tensorflow {

// ===================================================================

void SpriteMetadata::InitAsDefaultInstance() {
}
class SpriteMetadata::_Internal {
 public:
};

SpriteMetadata::SpriteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  single_image_dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SpriteMetadata)
}
SpriteMetadata::SpriteMetadata(const SpriteMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      single_image_dim_(from.single_image_dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_path().empty()) {
    image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SpriteMetadata)
}

void SpriteMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpriteMetadata_projector_5fconfig_2eproto.base);
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpriteMetadata::~SpriteMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.SpriteMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpriteMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpriteMetadata::ArenaDtor(void* object) {
  SpriteMetadata* _this = reinterpret_cast< SpriteMetadata* >(object);
  (void)_this;
}
void SpriteMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpriteMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpriteMetadata& SpriteMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpriteMetadata_projector_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SpriteMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SpriteMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_image_dim_.Clear();
  image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpriteMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string image_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SpriteMetadata.image_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 single_image_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_single_image_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_single_image_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpriteMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SpriteMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_path = 1;
  if (this->image_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_path().data(), static_cast<int>(this->_internal_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SpriteMetadata.image_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_path(), target);
  }

  // repeated uint32 single_image_dim = 2;
  {
    int byte_size = _single_image_dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_single_image_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SpriteMetadata)
  return target;
}

size_t SpriteMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SpriteMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 single_image_dim = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->single_image_dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _single_image_dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string image_path = 1;
  if (this->image_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpriteMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SpriteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SpriteMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpriteMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SpriteMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SpriteMetadata)
    MergeFrom(*source);
  }
}

void SpriteMetadata::MergeFrom(const SpriteMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SpriteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  single_image_dim_.MergeFrom(from.single_image_dim_);
  if (from.image_path().size() > 0) {
    _internal_set_image_path(from._internal_image_path());
  }
}

void SpriteMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SpriteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteMetadata::CopyFrom(const SpriteMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SpriteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteMetadata::IsInitialized() const {
  return true;
}

void SpriteMetadata::InternalSwap(SpriteMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  single_image_dim_.InternalSwap(&other->single_image_dim_);
  image_path_.Swap(&other->image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SpriteMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmbeddingInfo::InitAsDefaultInstance() {
  ::tensorflow::_EmbeddingInfo_default_instance_._instance.get_mutable()->sprite_ = const_cast< ::tensorflow::SpriteMetadata*>(
      ::tensorflow::SpriteMetadata::internal_default_instance());
}
class EmbeddingInfo::_Internal {
 public:
  static const ::tensorflow::SpriteMetadata& sprite(const EmbeddingInfo* msg);
};

const ::tensorflow::SpriteMetadata&
EmbeddingInfo::_Internal::sprite(const EmbeddingInfo* msg) {
  return *msg->sprite_;
}
EmbeddingInfo::EmbeddingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensor_shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.EmbeddingInfo)
}
EmbeddingInfo::EmbeddingInfo(const EmbeddingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensor_shape_(from.tensor_shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tensor_name().empty()) {
    tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tensor_name(),
      GetArena());
  }
  metadata_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata_path().empty()) {
    metadata_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata_path(),
      GetArena());
  }
  bookmarks_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bookmarks_path().empty()) {
    bookmarks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bookmarks_path(),
      GetArena());
  }
  tensor_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tensor_path().empty()) {
    tensor_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tensor_path(),
      GetArena());
  }
  if (from._internal_has_sprite()) {
    sprite_ = new ::tensorflow::SpriteMetadata(*from.sprite_);
  } else {
    sprite_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.EmbeddingInfo)
}

void EmbeddingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EmbeddingInfo_projector_5fconfig_2eproto.base);
  tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensor_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sprite_ = nullptr;
}

EmbeddingInfo::~EmbeddingInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.EmbeddingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmbeddingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensor_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sprite_;
}

void EmbeddingInfo::ArenaDtor(void* object) {
  EmbeddingInfo* _this = reinterpret_cast< EmbeddingInfo* >(object);
  (void)_this;
}
void EmbeddingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmbeddingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmbeddingInfo& EmbeddingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmbeddingInfo_projector_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void EmbeddingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.EmbeddingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_shape_.Clear();
  tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bookmarks_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tensor_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sprite_ != nullptr) {
    delete sprite_;
  }
  sprite_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmbeddingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tensor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.EmbeddingInfo.tensor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_metadata_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.EmbeddingInfo.metadata_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bookmarks_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bookmarks_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.EmbeddingInfo.bookmarks_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 tensor_shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tensor_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_tensor_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SpriteMetadata sprite = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sprite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensor_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tensor_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.EmbeddingInfo.tensor_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmbeddingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.EmbeddingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tensor_name().data(), static_cast<int>(this->_internal_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.tensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tensor_name(), target);
  }

  // string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata_path().data(), static_cast<int>(this->_internal_metadata_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.metadata_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata_path(), target);
  }

  // string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bookmarks_path().data(), static_cast<int>(this->_internal_bookmarks_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.bookmarks_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bookmarks_path(), target);
  }

  // repeated uint32 tensor_shape = 4;
  {
    int byte_size = _tensor_shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_tensor_shape(), byte_size, target);
    }
  }

  // .tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sprite(this), target, stream);
  }

  // string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tensor_path().data(), static_cast<int>(this->_internal_tensor_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EmbeddingInfo.tensor_path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tensor_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.EmbeddingInfo)
  return target;
}

size_t EmbeddingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.EmbeddingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tensor_shape = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tensor_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tensor_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tensor_name());
  }

  // string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata_path());
  }

  // string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bookmarks_path());
  }

  // string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tensor_path());
  }

  // .tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sprite_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmbeddingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.EmbeddingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbeddingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmbeddingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.EmbeddingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.EmbeddingInfo)
    MergeFrom(*source);
  }
}

void EmbeddingInfo::MergeFrom(const EmbeddingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.EmbeddingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_shape_.MergeFrom(from.tensor_shape_);
  if (from.tensor_name().size() > 0) {
    _internal_set_tensor_name(from._internal_tensor_name());
  }
  if (from.metadata_path().size() > 0) {
    _internal_set_metadata_path(from._internal_metadata_path());
  }
  if (from.bookmarks_path().size() > 0) {
    _internal_set_bookmarks_path(from._internal_bookmarks_path());
  }
  if (from.tensor_path().size() > 0) {
    _internal_set_tensor_path(from._internal_tensor_path());
  }
  if (from.has_sprite()) {
    _internal_mutable_sprite()->::tensorflow::SpriteMetadata::MergeFrom(from._internal_sprite());
  }
}

void EmbeddingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.EmbeddingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddingInfo::CopyFrom(const EmbeddingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.EmbeddingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddingInfo::IsInitialized() const {
  return true;
}

void EmbeddingInfo::InternalSwap(EmbeddingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensor_shape_.InternalSwap(&other->tensor_shape_);
  tensor_name_.Swap(&other->tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_path_.Swap(&other->metadata_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bookmarks_path_.Swap(&other->bookmarks_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tensor_path_.Swap(&other->tensor_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sprite_, other->sprite_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmbeddingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectorConfig::InitAsDefaultInstance() {
}
class ProjectorConfig::_Internal {
 public:
};

ProjectorConfig::ProjectorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  embeddings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ProjectorConfig)
}
ProjectorConfig::ProjectorConfig(const ProjectorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      embeddings_(from.embeddings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_checkpoint_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_checkpoint_path().empty()) {
    model_checkpoint_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_checkpoint_path(),
      GetArena());
  }
  model_checkpoint_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_checkpoint_dir().empty()) {
    model_checkpoint_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_checkpoint_dir(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProjectorConfig)
}

void ProjectorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectorConfig_projector_5fconfig_2eproto.base);
  model_checkpoint_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProjectorConfig::~ProjectorConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.ProjectorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjectorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_checkpoint_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectorConfig::ArenaDtor(void* object) {
  ProjectorConfig* _this = reinterpret_cast< ProjectorConfig* >(object);
  (void)_this;
}
void ProjectorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectorConfig& ProjectorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectorConfig_projector_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ProjectorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProjectorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embeddings_.Clear();
  model_checkpoint_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_checkpoint_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_checkpoint_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_checkpoint_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.ProjectorConfig.model_checkpoint_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.EmbeddingInfo embeddings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_embeddings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string model_checkpoint_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_checkpoint_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.ProjectorConfig.model_checkpoint_dir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProjectorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_checkpoint_path().data(), static_cast<int>(this->_internal_model_checkpoint_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProjectorConfig.model_checkpoint_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_checkpoint_path(), target);
  }

  // repeated .tensorflow.EmbeddingInfo embeddings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_embeddings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_embeddings(i), target, stream);
  }

  // string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_checkpoint_dir().data(), static_cast<int>(this->_internal_model_checkpoint_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProjectorConfig.model_checkpoint_dir");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_checkpoint_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProjectorConfig)
  return target;
}

size_t ProjectorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProjectorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.EmbeddingInfo embeddings = 2;
  total_size += 1UL * this->_internal_embeddings_size();
  for (const auto& msg : this->embeddings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_checkpoint_path());
  }

  // string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_checkpoint_dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProjectorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProjectorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProjectorConfig)
    MergeFrom(*source);
  }
}

void ProjectorConfig::MergeFrom(const ProjectorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProjectorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embeddings_.MergeFrom(from.embeddings_);
  if (from.model_checkpoint_path().size() > 0) {
    _internal_set_model_checkpoint_path(from._internal_model_checkpoint_path());
  }
  if (from.model_checkpoint_dir().size() > 0) {
    _internal_set_model_checkpoint_dir(from._internal_model_checkpoint_dir());
  }
}

void ProjectorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProjectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectorConfig::CopyFrom(const ProjectorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProjectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectorConfig::IsInitialized() const {
  return true;
}

void ProjectorConfig::InternalSwap(ProjectorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  embeddings_.InternalSwap(&other->embeddings_);
  model_checkpoint_path_.Swap(&other->model_checkpoint_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_checkpoint_dir_.Swap(&other->model_checkpoint_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SpriteMetadata* Arena::CreateMaybeMessage< ::tensorflow::SpriteMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SpriteMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::EmbeddingInfo* Arena::CreateMaybeMessage< ::tensorflow::EmbeddingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::EmbeddingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProjectorConfig* Arena::CreateMaybeMessage< ::tensorflow::ProjectorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ProjectorConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
